name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0' # Runs weekly

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [I210, generic, IntelCE]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake doxygen graphviz cppcheck clang-tidy

    - name: Build project
      run: |
        mkdir -p build
        cd build
        cmake -DARCH=${{ matrix.arch }} ..
        make

    - name: Build with IP Helper API
      run: |
        cd build
        cmake -DIPHLAPI=ON -DARCH=${{ matrix.arch }} ..
        make

    - name: Run static code analysis
      run: |
        cd build
        make static-analysis

    - name: Run resource management checks
      run: |
        cd build
        make resource-checks

  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64]

    env:
      NPCAP_DIR: ${{ secrets.NPCAP_DIR }}
      VSCMD_DEBUG: 3
      VSCMD_SKIP_SENDTELEMETRY: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
        
    - name: Install dependencies
      run: |
        choco install cmake --version=3.2.2
        choco install visualstudio2022community
        choco install npcap
        choco install cppcheck
        choco install llvm

    - name: Check iphlpapi.h availability and version
      shell: cmd
      run: |
        echo "Searching for iphlpapi.h..."
        DIRS=$(where /r "C:\Program Files (x86)\Windows Kits" iphlpapi.h 2>nul)
        if "%DIRS%"=="" (
          echo "iphlpapi.h not found!"
          exit 1
        ) else (
          echo "Found iphlpapi.h in:"
          echo %DIRS%
        )
        
        echo "Checking for MIB_INTERFACE_TIMESTAMP_CAPABILITIES..."
        findstr /C:"MIB_INTERFACE_TIMESTAMP_CAPABILITIES" %DIRS% > nul
        if errorlevel 1 (
          echo "MIB_INTERFACE_TIMESTAMP_CAPABILITIES not found in iphlpapi.h"
          exit 0  # or 1 if you want to fail early
        ) else (
          echo "MIB_INTERFACE_TIMESTAMP_CAPABILITIES found"
        )

    - name: Build project
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 17 2022" -A x64 ..
        cmake --build . --config Release

    - name: Run static code analysis
      run: |
        cppcheck .
        clang-tidy .

    - name: Run resource management checks
      run: |
        # Use Visual Studio's built-in tools for resource management checks
        echo "Running resource management checks using Visual Studio's built-in tools"

    - name: Configure W32Time for PTP support
      run: |
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Config" /v AnnounceFlags /t REG_DWORD /d 5 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient" /v Enabled /t REG_DWORD /d 1 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient" /v SpecialPollInterval /t REG_DWORD /d 900 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer" /v Enabled /t REG_DWORD /d 1 /f
        net stop w32time
        net start w32time

    - name: Test W32Time integration
      run: |
        w32tm /query /status
        w32tm /query /configuration

    - name: Integrate Intel hardware timestamping
      run: |
        cd src
        cl /EHsc timestamping.cpp
        timestamping.exe

    - name: Build and run IntegrateIntelHardwareTimestampingWithPacketTimestamping function
      run: |
        cd src
        cl /EHsc timestamping.cpp
        timestamping.exe IntegrateIntelHardwareTimestampingWithPacketTimestamping

  build-windows-x86:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x86]

    env:
      NPCAP_DIR: ${{ secrets.NPCAP_DIR }}
      VSCMD_DEBUG: 3
      VSCMD_SKIP_SENDTELEMETRY: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Install dependencies
      run: |
        choco install cmake --version=3.2.2
        choco install visualstudio2022community
        choco install npcap
        choco install cppcheck
        choco install llvm

    - name: Check iphlpapi.h availability and version
      shell: cmd
      run: |
        echo "Searching for iphlpapi.h..."
        DIRS=$(where /r "C:\Program Files (x86)\Windows Kits" iphlpapi.h 2>nul)
        if "%DIRS%"=="" (
          echo "iphlpapi.h not found!"
          exit 1
        ) else (
          echo "Found iphlpapi.h in:"
          echo %DIRS%
        )
        
        echo "Checking for MIB_INTERFACE_TIMESTAMP_CAPABILITIES..."
        findstr /C:"MIB_INTERFACE_TIMESTAMP_CAPABILITIES" %DIRS% > nul
        if errorlevel 1 (
          echo "MIB_INTERFACE_TIMESTAMP_CAPABILITIES not found in iphlpapi.h"
          exit 0  # or 1 if you want to fail early
        ) else (
          echo "MIB_INTERFACE_TIMESTAMP_CAPABILITIES found"
        )

    - name: Build project
      run: |
        mkdir build
        cd build
        cmake -G "Visual Studio 17 2022" -A x64 ..
        cmake --build . --config Release

    - name: Run static code analysis
      run: |
        cppcheck .
        clang-tidy .

    - name: Run resource management checks
      run: |
        # Use Visual Studio's built-in tools for resource management checks
        echo "Running resource management checks using Visual Studio's built-in tools"

    - name: Configure W32Time for PTP support
      run: |
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Config" /v AnnounceFlags /t REG_DWORD /d 5 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient" /v Enabled /t REG_DWORD /d 1 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient" /v SpecialPollInterval /t REG_DWORD /d 900 /f
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer" /v Enabled /t REG_DWORD /d 1 /f
        net stop w32time
        net start w32time

    - name: Test W32Time integration
      run: |
        w32tm /query /status
        w32tm /query /configuration

    - name: Integrate Intel hardware timestamping
      run: |
        cd src
        cl /EHsc timestamping.cpp
        timestamping.exe

    - name: Build and run IntegrateIntelHardwareTimestampingWithPacketTimestamping function
      run: |
        cd src
        cl /EHsc timestamping.cpp
        timestamping.exe IntegrateIntelHardwareTimestampingWithPacketTimestamping
